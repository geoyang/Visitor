// app.json
{
  "expo": {
    "name": "Visitor Management",
    "slug": "visitor-management-app",
    "version": "1.0.0",
    "orientation": "default",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "automatic",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#2563eb"
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.yourcompany.visitormanagement",
      "buildNumber": "1.0.0",
      "requireFullScreen": false,
      "infoPlist": {
        "NSCameraUsageDescription": "This app uses camera to take visitor photos and scan QR codes",
        "NSLocationWhenInUseUsageDescription": "This app uses location to track visitor check-ins at your office",
        "NSPhotoLibraryUsageDescription": "This app needs access to photo library to select visitor photos",
        "NSMicrophoneUsageDescription": "This app uses microphone for video recording features"
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#2563eb"
      },
      "package": "com.yourcompany.visitormanagement",
      "versionCode": 1,
      "permissions": [
        "CAMERA",
        "WRITE_EXTERNAL_STORAGE",
        "READ_EXTERNAL_STORAGE",
        "ACCESS_FINE_LOCATION",
        "ACCESS_COARSE_LOCATION",
        "RECORD_AUDIO",
        "VIBRATE"
      ]
    },
    "web": {
      "favicon": "./assets/favicon.png",
      "bundler": "metro"
    },
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera to take visitor photos and scan QR codes."
        }
      ],
      [
        "expo-location",
        {
          "locationAlwaysAndWhenInUsePermission": "Allow $(PRODUCT_NAME) to use your location to track visitor check-ins."
        }
      ],
      [
        "expo-image-picker",
        {
          "photosPermission": "The app accesses your photos to let you select visitor profile pictures."
        }
      ],
      [
        "expo-notifications",
        {
          "icon": "./assets/notification-icon.png",
          "color": "#2563eb",
          "sounds": [
            "./assets/notification.wav"
          ]
        }
      ]
    ],
    "extra": {
      "eas": {
        "projectId": "your-eas-project-id"
      }
    },
    "updates": {
      "fallbackToCacheTimeout": 0
    },
    "runtimeVersion": "1.0.0"
  }
}

// babel.config.js
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      'react-native-reanimated/plugin',
      [
        'module-resolver',
        {
          root: ['./src'],
          extensions: ['.ios.js', '.android.js', '.js', '.ts', '.tsx', '.json'],
          alias: {
            '@components': './src/components',
            '@screens': './src/screens',
            '@services': './src/services',
            '@utils': './src/utils',
            '@assets': './assets',
            '@types': './src/types',
          },
        },
      ],
    ],
  };
};

// metro.config.js
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

// Add SVG support
config.transformer.babelTransformerPath = require.resolve('react-native-svg-transformer');
config.resolver.assetExts = config.resolver.assetExts.filter(ext => ext !== 'svg');
config.resolver.sourceExts = [...config.resolver.sourceExts, 'svg'];

module.exports = config;

// tsconfig.json
{
  "extends": "@tsconfig/react-native/tsconfig.json",
  "compilerOptions": {
    "strict": true,
    "baseUrl": "./",
    "paths": {
      "@components/*": ["src/components/*"],
      "@screens/*": ["src/screens/*"],
      "@services/*": ["src/services/*"],
      "@utils/*": ["src/utils/*"],
      "@assets/*": ["assets/*"],
      "@types/*": ["src/types/*"]
    },
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src/**/*",
    "App.tsx",
    "index.js"
  ],
  "exclude": [
    "node_modules",
    "babel.config.js",
    "metro.config.js",
    "jest.config.js"
  ]
}

// .env.example
# API Configuration
API_BASE_URL=http://localhost:8000
API_TIMEOUT=10000

# App Configuration
APP_NAME=Visitor Management
APP_VERSION=1.0.0
ENVIRONMENT=development

# Feature Flags
ENABLE_CAMERA=true
ENABLE_LOCATION=true
ENABLE_NOTIFICATIONS=true
ENABLE_QR_SCANNER=true

# Analytics (Optional)
ANALYTICS_ENABLED=false
ANALYTICS_API_KEY=your-analytics-key

# Push Notifications (Optional)
PUSH_NOTIFICATIONS_ENABLED=false
FCM_SERVER_KEY=your-fcm-key

// .gitignore
# OSX
#
.DS_Store

# Xcode
#
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate

# Android/IntelliJ
#
build/
.idea
.gradle
local.properties
*.iml

# node.js
#
node_modules/
npm-debug.log
yarn-error.log

# BUCK
buck-out/
\.buckd/
*.keystore
!debug.keystore

# Bundle artifacts
*.jsbundle

# Expo
.expo/
dist/
web-build/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Mac files
.DS_Store

# Editor directories and files
.vscode/
.idea/
*.swp
*.swo

# EAS Build
build-*

# Temporary folders
tmp/
temp/